@using Main.Models.Listings
@model AttomJson
<body style="max-width: 100%; overflow-x: hidden;">
    <section class="heading-page header-text" id="top">

        <div class="row my-2">
            <div class="col">
                <img id="spinnyBoi" src="~/spinner.gif" style="width: 64px; height: 64px; display: none;" />
            </div>
            <div class="row my-2"><h1 style="color:white;">Enter some parameters</h1></div>
            <div class="limiter">
                <div class="wrap-table100">
                    <div class="table100 ver3 m-b-110">
                        <div class="table100-head">
                            <table>
                                <thead>
                                    <tr class="row100 head">
                                        <th class="cell100 column1" style="color:crimson;">ZipCode</th>
                                        <th class="cell100 column2" style="color:crimson;">Result Count</th>
                                        <th class="cell100 column2" style="color:crimson;">Minimum Price</th>
                                        <th class="cell100 column2" style="color:crimson;">Maximum Price</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                        <div class="table100-body">
                            <table>
                                <tbody>
                                    @using (Html.BeginForm("Listings", "ATTOM", FormMethod.Get))
                                    {
                                        <tr class="row100 head">
                                            <td class="cell100 column1"><input min="1" id="zipcode" type="number" name="zipcode" required="required" /></td>
                                            <td class="cell100 column2"><input min="1" id="pages" type="number" name="pages" required="required" /></td>
                                            <td class="cell100 column2"><input min="1" id="minPrice" type="number" name="minPrice" required="required" /></td>
                                            <td class="cell100 column2"><input min="1" id="maxPrice" type="number" name="maxPrice" required="required" /></td>
                                        </tr>
                                         <tr class="row100 head">
                                            <td class="cell100 column1"></td>
                                            <td class="cell100 column2"></td>
                                            <td class="cell100 column2"></td>
                                            <td class="cell100 column2"><input type="submit" class ="btn" value="SUBMIT" style = "color:crimson; width:100px;"></td>
                                        </tr>
                                    }

                                </tbody>
                            </table>
                        </div>

                    </div>
                </div>
            </div>
        </div>
        <!--<form asp-action="ListingsSubmission" asp-controller = "ATTOM" method = "get" enctype="multipart/form-data">-->
        <div class="row my-2"><h1 style="color:white;">Listings</h1>
        <div class="limiter">
            <div class="wrap-table100">
                <div class="table100 ver3 m-b-110">

                    <div class="table100-body js-pscroll">
                        <table id="sortMe">
                            <thead>
                                <tr class="row100 head">
                                    <th class="cell100 column1" style="color:crimson;">Address</th>
                                    <th class="cell100 column2" style="color:crimson;">Size(SQFT)</th>
                                    <th class="cell100 column2" style="color:crimson;">Bedrooms</th>
                                    <th class="cell100 column2" style="color:crimson;">Bathrooms</th>

                                    <th class="cell100 column2"><button style="color:crimson;" class="table__header">PRICE $  @Html.Tooltip("Click the boxes in the first row to sort!")</button></th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    try
                                    {
                                        foreach (var item in Model.Property)
                                        {
                                            <tr class="row100 head">
                                                <td class="cell100 column1">@item.address.oneLine</td>
                                                <td class="cell100 column2">@item.building.size.grosssize</td>
                                                <td class="cell100 column2">@item.building.rooms.beds</td>
                                                <td class="cell100 column2">@item.building.rooms.bathstotal</td>
                                                <td class="cell100 column2">@item.assessment.assessed.assdttlvalue</td>
                                            </tr>
                                        }
                                    }
                                    catch (Exception e)
                                    {

                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        </div>


        <!--</form>-->
    </section>
</body>



@section Scripts {
<script src="~/RealEstate/vendor/jquery/jquery-3.2.1.min.js"></script>
<script src="~/RealEstate/vendor/bootstrap/js/popper.js"></script>
<script src="~/RealEstate/vendor/bootstrap/js/bootstrap.min.js"></script>
<script src="~/RealEstate/vendor/select2/select2.min.js"></script>
<script src="~/RealEstate/vendor/perfect-scrollbar/perfect-scrollbar.min.js"></script>
<script src="~/RealEstate/js/main.js"></script>
<!--===============================================================================================-->
<link rel="icon" type="image/png" href="~/RealEstate/images/icons/favicon.ico" />
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="~/RealEstate/vendor/bootstrap/css/bootstrap.min.css">
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="~/RealEstate/fonts/font-awesome-4.7.0/css/font-awesome.min.css">
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="~/RealEstate/vendor/animate/animate.css">
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="~/RealEstate/vendor/select2/select2.min.css">
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="~/RealEstate/vendor/perfect-scrollbar/perfect-scrollbar.css">
<!--===============================================================================================-->
<link rel="stylesheet" type="text/css" href="~/RealEstate/css/util.css">
<link rel="stylesheet" type="text/css" href="~/RealEstate/css/main.css">
<!--===============================================================================================-->
<!------------------------------------------------------------------------------------------------->


<script>
    $('.js-pscroll').each(function(){
        var ps = new PerfectScrollbar(this);

        $(window).on('resize', function(){
            ps.update();
        })
    });


    document.addEventListener('DOMContentLoaded', function () {
            const table = document.getElementById('sortMe');
            const headers = table.querySelectorAll('th');
            const tableBody = table.querySelector('tbody');
            const rows = tableBody.querySelectorAll('tr');

            // Track sort directions
            const directions = Array.from(headers).map(function (header) {
                return '';
            });

            // Transform the content of given cell in given column
            const transform = function (index, content) {
                // Get the data type of column
                const type = headers[index].getAttribute('data-type');
                switch (type) {
                    case 'number':
                        return parseFloat(content);
                    case 'string':
                    default:
                        return content;
                }
            };

            const sortColumn = function (index) {
                // Get the current direction
                const direction = directions[index] || 'asc';

                // A factor based on the direction
                const multiplier = direction === 'asc' ? 1 : -1;

                const newRows = Array.from(rows);

                newRows.sort(function (rowA, rowB) {
                    const cellA = rowA.querySelectorAll('td')[index].innerHTML;
                    const cellB = rowB.querySelectorAll('td')[index].innerHTML;

                    const a = transform(index, cellA);
                    const b = transform(index, cellB);

                    switch (true) {
                        case a > b:
                            return 1 * multiplier;
                        case a < b:
                            return -1 * multiplier;
                        case a === b:
                            return 0;
                    }
                });

                // Remove old rows
                [].forEach.call(rows, function (row) {
                    tableBody.removeChild(row);
                });

                // Reverse the direction
                directions[index] = direction === 'asc' ? 'desc' : 'asc';

                // Append new row
                newRows.forEach(function (newRow) {
                    tableBody.appendChild(newRow);
                });
            };

            [].forEach.call(headers, function (header, index) {
                header.addEventListener('click', function () {
                    sortColumn(index);
                });
            });
        });
</script>

}
